/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package edu.duke.ece651.risc.server;

import java.io.IOException;
import java.net.ServerSocket;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;

import edu.duke.ece651.risc.shared.*;
import edu.duke.ece651.risc.shared.Entity.Room;
import edu.duke.ece651.risc.shared.Entity.RoomPlayer;
import edu.duke.ece651.risc.shared.Service.PlayerService;
import edu.duke.ece651.risc.shared.Service.RoomPlayerService;
import edu.duke.ece651.risc.shared.Service.RoomService;
import edu.duke.ece651.risc.shared.Service.TerritoryService;
import edu.duke.ece651.risc.shared.Service.VisionService;
import edu.duke.ece651.risc.shared.Utils.PlayerId2ColorHelper;
import edu.duke.ece651.risc.shared.Utils.Status;

public class Server {
  public static ThreadPoolExecutor threadPoolExecutor = new ThreadPoolExecutor(10, 10, 60L, TimeUnit.SECONDS,
      new LinkedBlockingQueue<>());
  // key: room name, value: RoomHandler
  protected static Map<String, RoomHandler> roomMap = new ConcurrentHashMap<>();
  protected static ServerSocket serverSocket;
  protected static Map<String, Messenger> allName2Messenger = new ConcurrentHashMap<>();
  // Temporary username : password
  protected static Map<String, String> UserPassword = new ConcurrentHashMap<>();
  protected static PlayerService playerService = new PlayerService();
  protected static RoomPlayerService roomPlayerService = new RoomPlayerService();
  protected static RoomService roomService = new RoomService();
  protected static TerritoryService territoryService = new TerritoryService();
  protected static VisionService visionService = new VisionService();

  /**
   * The main server function, after startup, server would accept connetion,
   * save player name with their messenger.
   * 
   * @param args not required for server startup
   * @throws IOException
   * @throws ClassNotFoundException
   */
  public static void main(String[] args) throws IOException, ClassNotFoundException {
    serverSocket = new ServerSocket(12345);
    System.out.println("start server and recover roomMap");
    recoverRoomMap();
    System.out.println("start server and recover roomMap");
    while (true) {
      Messenger messenger = new Messenger(serverSocket);
      String playerName = (String) messenger.recv();
      allName2Messenger.put(playerName, messenger);
      threadPoolExecutor.execute(new PlayerHandler(messenger));
    }
  }

  public static void recoverRoomMap() {
    roomService.clearUpRooms();
    List<Room> rooms = roomService.selectAllRooms();
    for (Room room : rooms) {
      int roomId = room.getId();
      String roomName = room.getname();
      int playerNum = room.getPlayerNum();
      int round = room.getRound();
      List<RoomPlayer> roomPlayers = roomPlayerService.selectAllByRoomId(roomId);
      GameMap gameMap = territoryService.recoverGampeMap(playerNum, roomId);
      RoomHandler roomHandler = new RoomHandler(playerNum, roomName, gameMap, roomId, round);
      for (RoomPlayer roomPlayer : roomPlayers) {
        roomHandler.playerNames.add(roomPlayer.getPlayerName());
        roomHandler.playerId2Name.put(roomPlayer.getPlayerId(), roomPlayer.getPlayerName());
        roomHandler.playerName2Id.put(roomPlayer.getPlayerName(), roomPlayer.getPlayerId());
        if (round == 0) {
          roomHandler.name2Status.put(roomPlayer.getPlayerName(), Status.WAITING_FOR_OTHER_PLAYERS);
        } else if (round == 1) {
          roomHandler.name2Status.put(roomPlayer.getPlayerName(), Status.TO_PLACEMENT);
        } else if (round >= 2) {
          roomHandler.name2Status.put(roomPlayer.getPlayerName(), Status.TO_DOACTION);
        }
        int techLevel = roomPlayer.getTechLevel();
        Map<String, Integer> resources = new HashMap<>();
        resources.put("food", roomPlayer.getFood());
        resources.put("technology", roomPlayer.getTechResource());
        ResourceHelper resourceHelper = new ResourceHelper(techLevel, resources);
        resourceHelper.cloakFlag = roomPlayer.getCloak();
        roomHandler.serverActionHelper.resourceHelpers
            .put(PlayerId2ColorHelper.playerId2Color.get(roomPlayer.getPlayerId()), resourceHelper);
        roomHandler.serverActionHelper.visionHelpers.put(
            PlayerId2ColorHelper.playerId2Color.get(roomPlayer.getPlayerId()),
            visionService.recoverVisionHelper(gameMap, roomPlayer.getPlayerId(), roomId));
      }
      roomMap.put(roomName, roomHandler);
    }
  }
}
