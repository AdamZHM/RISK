/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package edu.duke.ece651.risc.server;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.*;

import java.io.IOException;
import java.net.ServerSocket;
import java.net.UnknownHostException;
import java.util.Map;
import java.util.Set;

import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import edu.duke.ece651.risc.shared.EndGameDetection;
import edu.duke.ece651.risc.shared.GameMap;
import edu.duke.ece651.risc.shared.Messenger;

class ServerTest {
  // public void doOnePlacement(Placement p) throws IOException {
  // Territory territory = p.getTerritory();
  // String unit = p.getUnit();
  // Integer unitNum = p.getUnitNum();
  // Integer originUnitNum = territory.getMyUnits().get(unit).getNum();
  // territory.getMyUnits().get(unit).setNum(unitNum + originUnitNum);
  // }

  @Test
  public void testRecvActionFromAllPlayers() throws IOException, ClassNotFoundException {
    ServerSocket serverSocket = new ServerSocket(12349);
    int num = 3;
    GameMap gameMap = new GameMap(3);
    RoomHandler room = new RoomHandler(num, "room1", gameMap, 1, 0);
    Messenger messenger = mock(Messenger.class);
    Set<String> set = mock(Set.class);
    EndGameDetection detector = mock(EndGameDetection.class);
    Map<String, Messenger> map = mock(Map.class);
    doReturn(messenger).when(map).get(any());
    doReturn(false).when(set).contains(any());
    doReturn(set).when(detector).getActivePlayer(any());
    room.endGameDetection = detector;

  }

  @Test
  public void testServer() throws InterruptedException, UnknownHostException, IOException {
    Thread th = new Thread() {
      @Override()
      public void run() {
        try {
          String[] s = new String[1];
          Server.main(s);
        } catch (Exception e) {
        }
      }
    };
    th.start();
    Thread.sleep(100);
    Messenger messenger1 = new Messenger("127.0.0.1", 12345);
    messenger1.send("abc");
    assertEquals(Server.allName2Messenger.keySet().contains("abcd"), false);
  }

  // @Disabled
  // public void testServer() throws InterruptedException, UnknownHostException,
  // IOException, ClassNotFoundException {
  // Thread th = new Thread() {
  // @Override()
  // public void run() {
  // try {
  // String[] s = new String[1];
  // s[0] = "3";
  // Server.main(s);

  // } catch (Exception e) {
  // }
  // }
  // };
  // th.start();
  // Thread.sleep(100); // a bit of hack
  // Messenger messenger1 = new Messenger("127.0.0.1", 12345);
  // messenger1.send("A");
  // System.out.println(messenger1.recv());
  // Messenger messenger2 = new Messenger("127.0.0.1", 12345);
  // messenger2.send("B");
  // System.out.println(messenger2.recv());
  // Messenger messenger3 = new Messenger("127.0.0.1", 12345);
  // messenger3.send("C");
  // System.out.println(messenger3.recv());
  // MessageVO m1 = (MessageVO) messenger1.recv();
  // MessageVO m2 = (MessageVO) messenger2.recv();
  // MessageVO m3 = (MessageVO) messenger3.recv();
  // Placement p1 = new Placement("Red", "Oz,soldier,10", m1.getGameMap());
  // Placement p2 = new Placement("Green", "Scadrial,soldier,10",
  // m2.getGameMap());
  // Placement p3 = new Placement("Blue", "Mordor,soldier,10", m3.getGameMap());

  // doOnePlacement(p1);
  // doOnePlacement(p2);
  // doOnePlacement(p3);
  // m1.getGameMap().getTerritoryByName("Oz").getMyUnits().get("soldier").setNum(100);
  // messenger1.send(m1.getGameMap());
  // assertEquals(false, messenger1.recv());
  // m1.getGameMap().getTerritoryByName("Oz").getMyUnits().get("soldier").setNum(10);
  // messenger1.send(m1.getGameMap());
  // assertEquals(true, messenger1.recv());
  // messenger2.send(m2.getGameMap());
  // messenger2.recv();
  // messenger3.send(m3.getGameMap());
  // messenger3.recv();
  // MessageVO messageVO1 = (MessageVO) messenger1.recv();
  // MessageVO messageVO2 = (MessageVO) messenger2.recv();
  // MessageVO messageVO3 = (MessageVO) messenger3.recv();
  // assertEquals("From server toRed: All players have finished their initial
  // placement!!!!\n", messageVO1.getMessage());
  // assertEquals("From server toGreen: All players have finished their initial
  // placement!!!!\n",
  // messageVO2.getMessage());
  // assertEquals("From server toBlue: All players have finished their initial
  // placement!!!!\n",
  // messageVO3.getMessage());

  // Map<String, Integer> moveInfo3 = new HashMap<>();
  // moveInfo3.put("soldier", 6);
  // Map<String, Integer> moveInfo2 = new HashMap<>();
  // moveInfo2.put("soldier", 8);
  // Map<String, Integer> moveInfo = new HashMap<>();
  // moveInfo.put("soldier", 1);
  // Action action1 = new MoveAction(moveInfo, "Ozz", "Narnia", "Red", null);
  // messenger1.send(action1);
  // Boolean flag1 = (Boolean) messenger1.recv();
  // assertEquals(false, flag1);

  // Action action5 = new AttackAction(moveInfo, "Oz", "Mordor", "Red", null);
  // Action action4 = new MoveAction(moveInfo, "Oz", "Narnia", "Red", action5);
  // messenger1.send(action4);
  // messenger2.send(null);
  // messenger3.send(null);
  // GameMap gameMap = getGameMap(messenger1, messenger2, messenger3);

  // GameMapTextView gameMapTextView = new GameMapTextView();
  // // System.out.println(gameMapTextView.displayAllTerritory(gameMap, 3));

  // messenger1.send(new AttackAction(moveInfo2, "Oz", "Mordor", "Red", null));
  // messenger2.send(null);
  // messenger3.send(null);
  // gameMap = getGameMap(messenger1, messenger2, messenger3);
  // // System.out.println(gameMapTextView.displayAllTerritory(gameMap, 3));

  // Action action6 = new AttackAction(moveInfo2, "Scadrial", "Hogwarts", "Green",
  // null);
  // Action action7 = new AttackAction(moveInfo2, "Scadrial", "Oz", "Green",
  // action6);
  // Action action8 = new AttackAction(moveInfo2, "Scadrial", "Midkemia", "Green",
  // action7);
  // Action action9 = new AttackAction(moveInfo2, "Scadrial", "Mordor", "Green",
  // action8);

  // messenger1.send(null);
  // messenger2.send(action9);
  // Action action10 = new AttackAction(moveInfo3, "Mordor", "Scadrial", "Blue",
  // action5);
  // messenger3.send(action10);
  // gameMap = getGameMap(messenger1, messenger2, messenger3);
  // Action action11 = new AttackAction(moveInfo3, "Midkemia", "Narnia", "Green",
  // null);
  // Action action12 = new AttackAction(moveInfo2, "Mordor", "Gondor", "Green",
  // action11);
  // Action action13 = new AttackAction(moveInfo2, "Oz", "Scadrial", "Green",
  // action12);
  // Action action14 = new AttackAction(moveInfo, "Elantris", "Narnia", "Green",
  // action13);
  // messenger1.send(null);
  // messenger2.send(action14);
  // messenger3.send(null);
  // gameMap = getGameMap(messenger1, messenger2, messenger3);
  // // System.out.println(gameMapTextView.displayAllTerritory(gameMap, 3));
  // }

  // public GameMap getGameMap(Messenger messenger1, Messenger messenger2,
  // Messenger messenger3)
  // throws ClassNotFoundException, IOException {
  // Boolean flag4 = (Boolean) messenger1.recv();
  // Boolean flag2 = (Boolean) messenger2.recv();
  // Boolean flag3 = (Boolean) messenger3.recv();
  // GameMap gameMap1 = (GameMap) messenger1.recv();
  // GameMap gameMap2 = (GameMap) messenger2.recv();
  // GameMap gameMap3 = (GameMap) messenger3.recv();
  // return gameMap1;
  // }

  // @Disabled
  // void test_run() throws IOException, ClassNotFoundException,
  //     InterruptedException {
  //   Thread th = new Thread() {
  //     @Override()
  //     public void run() {
  //       try {
  //         ServerSocket serverSocket = new ServerSocket(12351);
  //         int num = 3;
  //         GameMap gameMap = new GameMap(3);

  //         RoomHandler room = new RoomHandler(num, "room2", gameMap);
  //         RoomHandler mockRoom = spy(room);

  //         Set<String> set = mock(Set.class);

  //         EndGameDetection detector = mock(EndGameDetection.class);
  //         doReturn(set).when(detector).getActivePlayer(any());

  //         doReturn(true).when(detector).isEndGame(set);
  //         room.endGameDetection = detector;

  //         mockRoom.run();

  //       } catch (Exception e) {
  //       }
  //     }
  //   };
  //   th.start();
  //   Thread.sleep(100); // a bit of hack
  //   Messenger messenger1 = new Messenger("127.0.0.1", 12351);
  //   messenger1.send("A");
  //   System.out.println(messenger1.recv());
  //   Messenger messenger2 = new Messenger("127.0.0.1", 12351);
  //   messenger2.send("B");
  //   System.out.println(messenger2.recv());
  //   Messenger messenger3 = new Messenger("127.0.0.1", 12351);
  //   messenger3.send("C");
  //   System.out.println(messenger3.recv());
  // }
}
