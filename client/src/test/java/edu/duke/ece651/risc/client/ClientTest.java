/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package edu.duke.ece651.risc.client;

import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.mockito.Mockito.spy;

import java.io.BufferedReader;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PrintStream;
import java.io.StringReader;
import java.net.ServerSocket;
import java.util.List;
import java.util.Map;

import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.parallel.ResourceLock;
import org.junit.jupiter.api.parallel.Resources;
import org.junit.jupiter.api.parallel.ResourceAccessMode;

import edu.duke.ece651.risc.shared.*;
import edu.duke.ece651.risc.shared.Messenger;
import edu.duke.ece651.risc.shared.Utils.PlayerId2ColorHelper;
import edu.duke.ece651.risc.shared.Utils.Status;
import edu.duke.ece651.risc.shared.vo.MessageVO;

class ClientTest {
  // @Test
  // public void test_main() throws ClassNotFoundException, IOException{
  //   Client spyClient=spy(new Client());

    
  //   String[] param={"a","b","c"};
  //   spyClient.main(param);
  // }

//   @Disabled
//   @ResourceLock(value = Resources.SYSTEM_OUT, mode = ResourceAccessMode.READ_WRITE)
//   public void test_client_3playerWatchLost() throws InterruptedException, ClassNotFoundException, IOException {
//     Thread th = new Thread() {
//       @Override()
//       public void run() {
//         try {
//           ServerSocket serverSocket = new ServerSocket(12345);
//           Messenger serverMessenger = new Messenger(serverSocket);
//           //Status status=new Status();
//           serverMessenger.send(1);
//           GameMap gameMap = new GameMap(3);
//           Map<Integer, List<String>> territory_group = gameMap.getTerritoryNamesInGroups();
//           Map<String, Territory> my_territories = gameMap.getMyTerritories();
//           for (String territory_name : territory_group.get(0)) {
//             my_territories.get(territory_name).setOwner("Red");
//           }
//           for (String territory_name : territory_group.get(1)) {
//             my_territories.get(territory_name).setOwner("Green");
//           }
//           for (String territory_name : territory_group.get(2)) {
//             my_territories.get(territory_name).setOwner("Blue");
//           }
//           // MessageVO messageVO = new MessageVO("", 0, PlayerId2ColorHelper.playerId2Color.get(0), gameMap,
//           // territory_group.get(0),3, 3, null, null, null, -1);
//           // serverMessenger.send(messageVO);//send initial map
//           // MessageVO messageVO2 = new MessageVO(
//           // "From server to: All players have finished their initial placement!!!!\n", 0,
//           // PlayerId2ColorHelper.playerId2Color.get(0), gameMap, gameMap.getTerritoryNamesInGroups().get(0),
//           // 3, 3, null, null, null, -1);
//           serverMessenger.send(true);
//           // serverMessenger.send(messageVO2);//send map after place
//           serverMessenger.send(true);
//           gameMap.getTerritoryByName("Midkemia").setOwner("Green");
//           gameMap.getTerritoryByName("Oz").setOwner("Green");
//           gameMap.getTerritoryByName("Narnia").setOwner("Green");
//           serverMessenger.send(gameMap);
//           gameMap.getTerritoryByName("Gondor").setOwner("Green");
//           gameMap.getTerritoryByName("Mordor").setOwner("Green");
//           gameMap.getTerritoryByName("Hogwarts").setOwner("Green");
//           serverMessenger.send(gameMap);
//           serverSocket.close();
//         } catch (Exception e) {
//         }
//       }
//     };
//     th.start();
//     Thread.sleep(100); // this is a bit of hack
//     InputStream input = getClass().getClassLoader().getResourceAsStream("inputb.txt");
//     assertNotNull(input);
//     System.setIn(input);
//     String[] param={"a", "127.0.0.1"};
//     Client.main(param);
//   }
  
}



